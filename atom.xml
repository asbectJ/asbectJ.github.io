<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PHP是世界上最好的语言</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://asbectj.github.io/"/>
  <updated>2020-03-22T10:03:38.788Z</updated>
  <id>https://asbectj.github.io/</id>
  
  <author>
    <name>谭家俊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kubernetes+harbor实践之搭建无状态服务nginx-php环境</title>
    <link href="https://asbectj.github.io/2020/03/10/kubernetes/kubernetes+harbor%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1nginx-php%E7%8E%AF%E5%A2%83/"/>
    <id>https://asbectj.github.io/2020/03/10/kubernetes/kubernetes+harbor%E5%AE%9E%E8%B7%B5%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%97%A0%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1nginx-php%E7%8E%AF%E5%A2%83/</id>
    <published>2020-03-10T15:14:09.000Z</published>
    <updated>2020-03-22T10:03:38.788Z</updated>
    
    <content type="html"><![CDATA[<p>看这个文章之前，如果没有接触过k8s的同学，建议先简单了解一些k8s的基本概念。<a href="https://kubernetes.io/zh/docs/tutorials/" target="_blank" rel="noopener">kubernetes官网</a>，开始之前，先列一下我自己本地搭建环境的一些清单吧，因为不是生产环境，只能用vagrant+vm创建虚拟机器，打造所需的集群环境，详见：</p><table><thead><tr><th>名称</th><th>IP</th><th>配置</th><th>备注</th></tr></thead><tbody><tr><td>k8s master节点</td><td>192.168.1.103</td><td>系统：centos、内存：2G、 CPU核数：2</td><td>master节点至少需要的最低配置，不然运行会很卡，而且CPU低于2的话是启动不起来的</td></tr><tr><td>k8s node节点</td><td>192.168.1.104</td><td>系统：centos、内存：512M、 CPU核数：1</td><td></td></tr><tr><td>harbor服务</td><td>192.168.1.108</td><td>系统：centos、内存：512M、 CPU核数：1</td><td></td></tr></tbody></table><a id="more"></a><blockquote><p>用docker创建nginx-php镜像</p></blockquote><p>请参考网上文章：<a href="https://www.cnblogs.com/tu6ge/p/8041437.html" target="_blank" rel="noopener">https://www.cnblogs.com/tu6ge/p/8041437.html</a></p><blockquote><p>安装harbor镜像仓库</p></blockquote><p>请参考往期教程<a href="https://asbectj.github.io/2020/03/06/docker/harbor/harbor%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">【harbor的简单应用】</a>或其他网上教程</p><blockquote><p>安装kubeadm集群</p></blockquote><p>请参考往期教程<a href="https://asbectj.github.io/2019/05/06/kubernetes/%E5%88%A9%E7%94%A8kubeadm%E6%90%AD%E5%BB%BAkubernetes%E9%9B%86%E7%BE%A4/" target="_blank" rel="noopener">【利用kubeadm搭建kubernetes集群】</a>或其他网上教程</p><blockquote><p>在k8s node节点配置docker私有仓库，也就是我们部署的harbor服务地址。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;:[&quot;http:&#x2F;&#x2F;harbor.cn&quot;],</span><br><span class="line">&#125;</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl resatrt docker</span><br></pre></td></tr></table></figure><blockquote><p>准备好需要configMap.yaml文件,文件配置如下：</p></blockquote><ul><li>nginx的配置文件nginx-php-nginxconfigmap.yaml（映射在pod容器中的/usr/local/nginx/conf/conf.d），如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">    name: nginx-php-nginxconfig</span><br><span class="line">data:</span><br><span class="line">    www.conf: |</span><br><span class="line">        server &#123;</span><br><span class="line">            listen       80;</span><br><span class="line">            server_name  nginx.test.com;</span><br><span class="line">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">            access_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host_access.log;</span><br><span class="line">            error_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host_error.log debug;</span><br><span class="line">            location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">            index  index.html index.htm index.php;</span><br><span class="line">            &#125;</span><br><span class="line">            error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">            location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            location ~ \.php$ &#123;</span><br><span class="line">              fastcgi_pass   0.0.0.0:9000;</span><br><span class="line">              fastcgi_index  index.php;</span><br><span class="line">              fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">              include        fastcgi_params;</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>php-fpm的配置文件nginx-php-php-fpm-wwwconfig-configmap.yaml（映射在pod容器中的/usr/local/php/etc/php-fpm.d），如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">    name: nginx-php-php-fpm-wwwconfig</span><br><span class="line">data:</span><br><span class="line">    www.conf: |</span><br><span class="line">           [www]</span><br><span class="line">           user &#x3D; www</span><br><span class="line">           group &#x3D; www</span><br><span class="line">           listen &#x3D; 0.0.0.0:9000</span><br><span class="line">           pm &#x3D; dynamic</span><br><span class="line">           pm.max_children &#x3D; 30</span><br><span class="line">           pm.start_servers &#x3D; 2</span><br><span class="line">           pm.min_spare_servers &#x3D; 1</span><br><span class="line">           pm.max_spare_servers &#x3D; 20</span><br><span class="line">           ;access.log &#x3D; log&#x2F;$pool.access.log</span><br><span class="line">           ;slowlog &#x3D; log&#x2F;$pool.log.slow</span><br></pre></td></tr></table></figure><p>创建configMap:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-php-nginxconfigmap.yaml</span><br><span class="line">kubectl apply -f nginx-php-php-fpm-wwwconfig-configmap.yaml</span><br></pre></td></tr></table></figure><blockquote><p>准备好需要部署的deloyment.yaml文件配置nginx-php-deployment.yaml，如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">    name: nginx-php-deployment</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">        matchLabels:</span><br><span class="line">            app: nginx-php</span><br><span class="line">    replicas: 1</span><br><span class="line">    template:</span><br><span class="line">        metadata:</span><br><span class="line">            labels:</span><br><span class="line">                app: nginx-php</span><br><span class="line">        spec:</span><br><span class="line">            containers:</span><br><span class="line">                - name: nginx-php</span><br><span class="line">                  image: tanjj.harbor.com&#x2F;nginx-php&#x2F;nginx-php-v1:v1</span><br><span class="line">                  ports:</span><br><span class="line">                      - containerPort: 80</span><br><span class="line">                      - containerPort: 9000</span><br><span class="line">                  volumeMounts:</span><br><span class="line">                      - name: nginx-php-nginxconfig</span><br><span class="line">                        mountPath: &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;conf.d</span><br><span class="line">                      - name: web-root</span><br><span class="line">                        mountPath: &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</span><br><span class="line">                      - name: nginx-log</span><br><span class="line">                        mountPath: &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs</span><br><span class="line">                      - name: nginx-php-php-fpm-wwwconfig</span><br><span class="line">                        mountPath: &#x2F;usr&#x2F;local&#x2F;php&#x2F;etc&#x2F;php-fpm.d</span><br><span class="line">            volumes:</span><br><span class="line">                - name: nginx-php-nginxconfig</span><br><span class="line">                  configMap:</span><br><span class="line">                      name: nginx-php-nginxconfig</span><br><span class="line">                - name: web-root</span><br><span class="line">                  hostPath:</span><br><span class="line">                      path: &#x2F;var&#x2F;data&#x2F;nginx-php</span><br><span class="line">                - name: nginx-log</span><br><span class="line">                  hostPath:</span><br><span class="line">                      path: &#x2F;var&#x2F;log&#x2F;nginx-php</span><br><span class="line">                - name: nginx-php-php-fpm-wwwconfig</span><br><span class="line">                  configMap:</span><br><span class="line">                      name: nginx-php-php-fpm-wwwconfig</span><br></pre></td></tr></table></figure><p>启动deployment</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-php-deployment.yaml</span><br></pre></td></tr></table></figure><p>查看是否启动成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br><span class="line"></span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-php-deployment-f97dd787d-mdfr5   1&#x2F;1     Running   0          56m</span><br></pre></td></tr></table></figure><blockquote><p>准备好需要service.yaml文件nginx-php-service.yaml,如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx-php</span><br><span class="line">  name: nginx-php</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - name: 80-80</span><br><span class="line">    port: 80</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx-php</span><br><span class="line">  type: NodePort</span><br><span class="line">status:</span><br><span class="line">  loadBalancer: &#123;&#125;</span><br></pre></td></tr></table></figure><p>启动nginx-php服务，这次我们是以NodePort类型的服务启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f nginx-php-service.yaml</span><br></pre></td></tr></table></figure><p>查看服务是否启动成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line">NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443&#x2F;TCP        5h28m</span><br><span class="line">nginx-php    NodePort    10.96.101.213   &lt;none&gt;        80:31185&#x2F;TCP   148m</span><br></pre></td></tr></table></figure><p>当服务启动成功后,我们可以用k8s node节点IP + 暴露服务的NodePort端口访问，这里的地址是：192.168.1.104:31185。访问结果如图：<br><img src="https://oscimg.oschina.net/oscnet/up-17bb3114a8059d18d4a7705004be11d923f.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看这个文章之前，如果没有接触过k8s的同学，建议先简单了解一些k8s的基本概念。&lt;a href=&quot;https://kubernetes.io/zh/docs/tutorials/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubernetes官网&lt;/a&gt;，开始之前，先列一下我自己本地搭建环境的一些清单吧，因为不是生产环境，只能用vagrant+vm创建虚拟机器，打造所需的集群环境，详见：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;配置&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;k8s master节点&lt;/td&gt;
&lt;td&gt;192.168.1.103&lt;/td&gt;
&lt;td&gt;系统：centos、内存：2G、 CPU核数：2&lt;/td&gt;
&lt;td&gt;master节点至少需要的最低配置，不然运行会很卡，而且CPU低于2的话是启动不起来的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k8s node节点&lt;/td&gt;
&lt;td&gt;192.168.1.104&lt;/td&gt;
&lt;td&gt;系统：centos、内存：512M、 CPU核数：1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;harbor服务&lt;/td&gt;
&lt;td&gt;192.168.1.108&lt;/td&gt;
&lt;td&gt;系统：centos、内存：512M、 CPU核数：1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://asbectj.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="运维" scheme="https://asbectj.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="devops" scheme="https://asbectj.github.io/tags/devops/"/>
    
      <category term="kubernetes" scheme="https://asbectj.github.io/tags/kubernetes/"/>
    
      <category term="harbor" scheme="https://asbectj.github.io/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>Swoole4协程专题总结</title>
    <link href="https://asbectj.github.io/2020/03/10/swoole/Swoole4%E5%8D%8F%E7%A8%8B%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://asbectj.github.io/2020/03/10/swoole/Swoole4%E5%8D%8F%E7%A8%8B%E4%B8%93%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-03-10T02:14:09.000Z</published>
    <updated>2020-03-22T09:58:00.376Z</updated>
    
    <content type="html"><![CDATA[<p>swoole4出来了也好段时间了，很久之前也用swoole协程做过一些东西。最近由于公司在项目中想用swoole优化并行处理一些逻辑业务，于是重新看了协swoole4，发现这次版本对协程的支持更加完善了，于是有了整理此出此文章的想法，目的让大家比较清晰了解到swoole协程的一些例子或者使用，特别是没用过或者没接触过协程的朋友。想起当年自己了解协程是啥的时候，也是四处找不到什么好文章。在我看来，这样系统的总结起来，才是最快入坑的。</p><blockquote><p>什么是协程</p></blockquote><p>大家应该都知道线程是CPU的最小调度单元，而协程可以认为是用户状态下的线程，所以是依赖进程存在的。但是协程不能利用多核CPU,不能跨进程调度，但它的调度不需要系统参与，所以创建销毁和切换的成本很低，所以在swoole的文档也有写到，在协程中，1s内你可以读写1万次文件，睡眠1万次，用PDO和mysqli与数据库通信1万次等</p><a id="more"></a><blockquote><p>协程环境（协程容器）</p></blockquote><p>在swoole的协程中，所有的协程必须在协程环境或者说协程容器内创建，才会发生协程调度。在swoole4中，大概有以下三种情况是创建协程容器环境的：</p><ol><li>异步风格的服务端程序start方法.详见官方文档<a href="https://wiki.swoole.com/#/server/co_init" target="_blank" rel="noopener">异步服务端程序</a>章节</li><li>Process或者Proce\Pool的start方法。详见官方文档<a href="https://wiki.swoole.com/#/process" target="_blank" rel="noopener">进程管理</a>章节</li><li>自主创建自定义协程容器：Co\run()方法。使用例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Co\run(function () &#123;</span><br><span class="line">go(function () &#123;</span><br><span class="line">Co::sleep(3);</span><br><span class="line">echo &quot;c[1]\n&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">go(function () &#123;</span><br><span class="line">echo &quot;c[2]\n&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">echo &quot;outside&quot;;</span><br><span class="line">&#x2F;*程序输出结果：</span><br><span class="line">c[2]</span><br><span class="line">c[1]</span><br><span class="line">outside*&#x2F;</span><br></pre></td></tr></table></figure>其实Co::run方法是对Swoole\Coroutine\Scheduler类的封装，了解更多，可见官方文档<a href="https://wiki.swoole.com/#/coroutine/scheduler" target="_blank" rel="noopener">协程容器</a>章节。关于scheduler的使用例子：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$scheduler &#x3D; new Swoole\Coroutine\Scheduler();</span><br><span class="line">&#x2F;&#x2F;和go函数不同，add方法添加的协程，要等start调用后才一起并发执行，不调用不执行，其中a,b是传进来等参数</span><br><span class="line">$scheduler-&gt;add(function ($a, $b) &#123;</span><br><span class="line">Co::sleep(2);</span><br><span class="line">echo $a . PHP_EOL;</span><br><span class="line">echo $b . PHP_EOL;</span><br><span class="line">&#125;, &quot;add1&quot;, 12345);</span><br><span class="line">$scheduler-&gt;add(function ($a, $b) &#123;</span><br><span class="line">Co::sleep(1);</span><br><span class="line">echo $a . PHP_EOL;</span><br><span class="line">echo $b . PHP_EOL;</span><br><span class="line">&#125;, &quot;add2&quot;, 12345);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在 start 时会同时启动 $num 个 $fn 协程，并行地执行。</span><br><span class="line">$scheduler-&gt;parallel(10, function ($t) &#123;</span><br><span class="line">Co:</span><br><span class="line">sleep($t);</span><br><span class="line">echo &quot;Co&quot; . Co::getCid() . PHP_EOL;</span><br><span class="line">&#125;, 0.05);</span><br><span class="line">$scheduler-&gt;start();</span><br><span class="line">&#x2F;*运行结果：</span><br><span class="line">Co3</span><br><span class="line">Co4</span><br><span class="line">Co5</span><br><span class="line">Co6</span><br><span class="line">Co7</span><br><span class="line">Co8</span><br><span class="line">Co9</span><br><span class="line">Co10</span><br><span class="line">Co11</span><br><span class="line">Co12</span><br><span class="line">add2</span><br><span class="line">12345</span><br><span class="line">add1</span><br><span class="line">12345*&#x2F;</span><br></pre></td></tr></table></figure><blockquote><p>协程调度</p></blockquote><ul><li><p>手动调度：yield让出执行权，然后resume这种方式。例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Co\run(function () &#123;</span><br><span class="line"></span><br><span class="line">$cid &#x3D; go(function () &#123;</span><br><span class="line">echo &quot;co[1] start\n&quot;;</span><br><span class="line">co::yield();&#x2F;&#x2F;让出当前执行权，不基于io调度。且必须和resume成对使用，否则会发生协程泄漏</span><br><span class="line">echo &quot;co[1] end\n&quot;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">go(function () use ($cid) &#123;</span><br><span class="line">echo &quot;co[2] start\n&quot;;</span><br><span class="line">co::resume($cid);&#x2F;&#x2F;恢复某个协程的执行权</span><br><span class="line">echo &quot;co[2] end\n&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;*运行结果：</span><br><span class="line">co[1] start</span><br><span class="line">co[2] start</span><br><span class="line">co[1] end</span><br><span class="line">co[2] end*&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>基于IO调度：发生IO阻塞，自动让出执行权，等IO准备好再次自动恢复执行权。下面的一键协程化，就是把原有PHP的一些同步IO，使得在协程容器中进行的是协程方式的异步IO调度。</p><blockquote><p>一键协程化（同步IO变协程异步IO）</p></blockquote></li></ul><p>众所周知，在PHP中很多请求外部资源的操作都是同步IO的，如curl一个http请求，用pdo连接查询数据库，或者用file_get_contents()读写文件等等，在发生IO请求时，往往同步的代码会在请求第三方服务的时候，发生阻塞等待。为了让这些场景实现异步IO,swoole4底层扩展是采用了PHP HOOK的方式，hook掉大部署产生IO阻塞的function，让其在底层实现协程方式的IO调度。例如你想要在curl中发生协程调度，只要在协程环境前调用一行代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Co::set([&#39;hook_flags&#39; &#x3D;&gt; SWOOLE_HOOK_CURL])</span><br></pre></td></tr></table></figure><p>应用例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Co::set([&#39;hook_flags&#39; &#x3D;&gt; SWOOLE_HOOK_CURL]);</span><br><span class="line">Co\run(function () &#123;</span><br><span class="line">go(function () &#123;</span><br><span class="line">$ch &#x3D; curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, false);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">$result&#x3D;curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">echo &quot;curl finisned&quot; . PHP_EOL;</span><br><span class="line">&#x2F;&#x2F;var_dump($result);</span><br><span class="line">&#125;);</span><br><span class="line">echo &quot;here&quot; . PHP_EOL;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;*运行结果：</span><br><span class="line">here</span><br><span class="line">curl finisned*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*注视掉&#x2F;&#x2F;Co::set([&#39;hook_flags&#39; &#x3D;&gt; SWOOLE_HOOK_CURL]);，由于curl不会再发生协程调用，所有运行结果：</span><br><span class="line">curl finisned</span><br><span class="line">here</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>了解更多能Hook的函数，参见章节<a href="https://wiki.swoole.com/#/runtime" target="_blank" rel="noopener">一键协程化</a></p><blockquote><p>协程API</p></blockquote><p>swoole4封装好的一些协程API,包括常用的：Swoole\Coroutine::getCid(),Swoole\Coroutine::yield()等，这里说一个有趣的api方法，就是Swoole\Coroutine::defer()方法，此方法作用是在协程关闭前调用，用于资源的释放，就算抛异常也会执行。例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Co\run(function () &#123;</span><br><span class="line">go(function () &#123;</span><br><span class="line">co::sleep(1.0);</span><br><span class="line">echo &quot;co[1] end\n&quot;;</span><br><span class="line">&#125;);</span><br><span class="line">go(function () &#123;</span><br><span class="line">Swoole\Coroutine::defer(function () &#123;</span><br><span class="line">echo &quot;defer&quot; . PHP_EOL;</span><br><span class="line">&#125;);&#x2F;&#x2F;协程关闭前调用，就行放在所有的逻辑前面，也总是在协程关闭前调用</span><br><span class="line">echo &quot;co[2] end\n&quot;;</span><br><span class="line">&#x2F;&#x2F;throw new Exception(&quot;co[2] exception&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;*</span><br><span class="line">运行结果：</span><br><span class="line">co[2] end</span><br><span class="line">defer</span><br><span class="line">co[1] end</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>更多API参见官方文档<a href="https://wiki.swoole.com/#/coroutine/coroutine" target="_blank" rel="noopener">协程API</a>章节</p><blockquote><p>协程进阶</p></blockquote><ul><li>channel<br>channel类似于php的数组，仅仅使用内存，没其他资源申请，无IO消耗，而且是基于引用计数实现的，零内存拷贝，传递巨大字符或者数组都不会产生额外性能消耗。<ol><li>channel主要用来协程间通信的，不能跨进程使用。</li><li>channel重要特性是，当channel push满了，会阻塞当前协程，直到有其他协程pop出后恢复到当前程序执行处。相反，当channel pop空了，也会阻塞当前协程，直到有其他协程push数据进来才恢复执行。这种特性很像生产者和消费者之间的调度。</li></ol></li><li>连接池：结和channel的pop和push之间的交互阻塞调用的特性，可以用channel来存新建的连接（也就是连接的存放池），每来一个请求pop出一个连接，当channel无连接可以pop时，会阻塞等待其他请求释放连接到channel中（也就是连接池中）。当然pop()方法是有超时参数设置的，超过等待时间没其他请求释放连接push进来，当前协程不再阻塞等待。具体详细实战，可参考本人很久之前分享的文章<a href="https://my.oschina.net/u/2394701/blog/2046414" target="_blank" rel="noopener">swoole自行打造mysql连接池</a>，当时官方对于连接池的文档是非常少，而且swoole没现成的封装，现在看到官方已经出了连接池的封装，可以直接参考使用<a href="https://wiki.swoole.com/#/coroutine/conn_pool" target="_blank" rel="noopener">连接池</a>章节</li><li>并发调用：也利用channel的pop和push产生阻塞调用的特性，申请长度为N的channel,然后循环创建N个子协程去执行逻辑，每个子协程执行完毕后push数据进channel，然后主协程循环pop出来。因为初次channel为空，就达到了主协程阻塞等待子协程请求数据返回push进channel然后再恢复执行主协程的效果。官方已经针对这个特性专门封装了并发调用类WaitGroup。实战使用见本人另一文章<a href="https://note.youdao.com/" target="_blank" rel="noopener">实战协程并发和多进程任务处理</a>或者了解并发调用的可参考官方文档<a href="https://wiki.swoole.com/#/coroutine/wait_group" target="_blank" rel="noopener">WaitGroup</a>章节</li></ul><blockquote><p>结束语</p></blockquote><p>至此，关于swoole4协程相关的一些东西基本总结完毕，可能没说到什么原理性的东西，这些有待大家日后一起学习探讨，主要还是应用和例子为主。感觉这次swoole的4版本已经升级支持协程的很多东西了，比起之前的版本，用起来实在爽了好多。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;swoole4出来了也好段时间了，很久之前也用swoole协程做过一些东西。最近由于公司在项目中想用swoole优化并行处理一些逻辑业务，于是重新看了协swoole4，发现这次版本对协程的支持更加完善了，于是有了整理此出此文章的想法，目的让大家比较清晰了解到swoole协程的一些例子或者使用，特别是没用过或者没接触过协程的朋友。想起当年自己了解协程是啥的时候，也是四处找不到什么好文章。在我看来，这样系统的总结起来，才是最快入坑的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是协程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家应该都知道线程是CPU的最小调度单元，而协程可以认为是用户状态下的线程，所以是依赖进程存在的。但是协程不能利用多核CPU,不能跨进程调度，但它的调度不需要系统参与，所以创建销毁和切换的成本很低，所以在swoole的文档也有写到，在协程中，1s内你可以读写1万次文件，睡眠1万次，用PDO和mysqli与数据库通信1万次等&lt;/p&gt;
    
    </summary>
    
    
      <category term="swoole" scheme="https://asbectj.github.io/categories/swoole/"/>
    
    
      <category term="swoole" scheme="https://asbectj.github.io/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>swoole4应用之协程并发和多进程实践</title>
    <link href="https://asbectj.github.io/2020/03/08/swoole/swoole4%E5%BA%94%E7%94%A8%E4%B9%8B%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    <id>https://asbectj.github.io/2020/03/08/swoole/swoole4%E5%BA%94%E7%94%A8%E4%B9%8B%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%92%8C%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%AE%9E%E8%B7%B5/</id>
    <published>2020-03-08T02:14:09.000Z</published>
    <updated>2020-03-22T09:57:52.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景</p></blockquote><p>某租车平台，在用户请求搜索车辆时，需要先去请求租车公司的接口，拿到对应的套餐报价回来，然后再进行统一的根据具体规则进行业务加装，例如加装一些优惠券，评分和芝麻标示等，然后返回结果给前端。</p><blockquote><p>分析</p></blockquote><ul><li>上诉过程，由于考虑请求的供应商是大量的，假设一次二十个供应商，然后每个供应商有1千的报价返回，就有2万报价数据返回。然后在自身业务加装的时候，也不单单只有一两个业务，可能数十个。所以==每一次用户请求直接curl所有的供应商接口，拿到数据后遍厉加装，入库，返回。这样的方法是行不通的，不仅仅整个接口有可能被供应商的API超时拖垮，还可能打满整个机器的fpm进程，从而拖垮整站。==</li><li>目前我们应用的方案是：<img src="https://oscimg.oschina.net/oscnet/up-4f8049558b6f34bbca5bb391031fe571288.png" alt="image"></li><li>上面方案先撇开队列的相关的东西，就看数据入库后再读取这里分析如何优化：<ol><li>每次读取都是一次性读取一次搜索产生的所有套餐</li><li>所有业务逻辑加装都是串行，在一个进程处理。<blockquote><p>优化</p></blockquote></li></ol></li><li>协程或者多线程并发读取数据</li><li>多进程或者线程加装独立的业务逻辑<a id="more"></a>若用多线程处理，需换语言，如Java，但需学习新语言，这样后期维护难，成本高。若直接全部用php的多进程，一个进程切换和销毁销耗大，且封装不好。所有决定用swoole扩展，用协程的并发请求去拉起数据，然后用进程池去加装套餐业务。进程间的数据共享通过共享内存解决。大致的流程代码如下（例子中协程拉取数据部分是用http方式，实际应为直接读取mongo）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use Swoole\Process;</span><br><span class="line"></span><br><span class="line">Co::set([&#39;hook_flags&#39; &#x3D;&gt; SWOOLE_HOOK_ALL]);&#x2F;&#x2F;使用php一些底层函数一键协程化，产生io调度，不包括CURL</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;协程并发，分页获取车型列表数据</span><br><span class="line">$carList &#x3D; [];</span><br><span class="line">Co\run(function () use (&amp;$carList) &#123;</span><br><span class="line"></span><br><span class="line">$wg &#x3D; new \Swoole\Coroutine\WaitGroup();</span><br><span class="line">$carList &#x3D; $result &#x3D; [];</span><br><span class="line"></span><br><span class="line">$wg-&gt;add();</span><br><span class="line">&#x2F;&#x2F;启动第一个协程</span><br><span class="line">go(function () use ($wg, &amp;$result) &#123;</span><br><span class="line">$result[0] &#x3D; getCarList(0, 1);</span><br><span class="line">echo &#39;co[1] end&#39; . PHP_EOL;</span><br><span class="line">$wg-&gt;done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$wg-&gt;add();</span><br><span class="line">go(function () use ($wg, &amp;$result) &#123;</span><br><span class="line">$result[1] &#x3D; getCarList(2, 3);</span><br><span class="line">echo &#39;co[2] end&#39; . PHP_EOL;</span><br><span class="line">$wg-&gt;done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$wg-&gt;add();</span><br><span class="line">go(function () use ($wg, &amp;$result) &#123;</span><br><span class="line">$result[2] &#x3D; getCarList(4, 5);</span><br><span class="line">echo &#39;co[3] end&#39; . PHP_EOL;</span><br><span class="line">$wg-&gt;done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;挂起当前协程，等待所有任务完成后恢复组装数据</span><br><span class="line">$wg-&gt;wait();</span><br><span class="line">foreach ($result as $item) &#123;</span><br><span class="line">$carList &#x3D; array_merge($carList, $item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;多进程处理获取后的车型列表数据</span><br><span class="line">$table &#x3D; new Swoole\Table(1024);</span><br><span class="line">$table-&gt;column(&#39;clid&#39;, Swoole\Table::TYPE_STRING, 16);</span><br><span class="line">$table-&gt;column(&#39;id&#39;, Swoole\Table::TYPE_STRING, 16);</span><br><span class="line">$table-&gt;column(&#39;sesame&#39;, Swoole\Table::TYPE_INT, 8);</span><br><span class="line">$table-&gt;column(&#39;easy&#39;, Swoole\Table::TYPE_INT, 8);</span><br><span class="line">$table-&gt;column(&#39;coupon&#39;, Swoole\Table::TYPE_INT, 8);</span><br><span class="line">$table-&gt;create();&#x2F;&#x2F;申请内存</span><br><span class="line"></span><br><span class="line">$startTime &#x3D; time();</span><br><span class="line">&#x2F;&#x2F;正常用process\Pool进程池替代</span><br><span class="line">for ($n &#x3D; 1; $n &lt;&#x3D; 3; $n++) &#123;</span><br><span class="line">$process &#x3D; new Process(function () use ($n, $table, $carList) &#123;</span><br><span class="line">switch ($n) &#123;</span><br><span class="line">case 1:</span><br><span class="line">handleSesame($carList, $table);</span><br><span class="line">break;</span><br><span class="line">case 2:</span><br><span class="line">handleEasy($carList, $table);</span><br><span class="line">break;</span><br><span class="line">case 3:</span><br><span class="line">handleCoupon($carList, $table);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">$process-&gt;start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ($n &#x3D; 3; $n--;) &#123;</span><br><span class="line">$status &#x3D; Process::wait(true);</span><br><span class="line">echo &quot;Recycled #&#123;$status[&#39;pid&#39;]&#125;, code&#x3D;&#123;$status[&#39;code&#39;]&#125;, signal&#x3D;&#123;$status[&#39;signal&#39;]&#125;&quot; . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;used time &quot; . (time() - $startTime) . &#39;S&#39; . PHP_EOL;</span><br><span class="line">foreach ($carList as $carDetail) &#123;</span><br><span class="line">var_dump($table-&gt;get(getKey($carDetail)));</span><br><span class="line">$table-&gt;del(getKey($carDetail));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exit;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;处理芝麻业务</span><br><span class="line">function handleSesame($carList &#x3D; [], $table &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;Child #&#39; . getmypid() . &quot; start to handle Sesame&quot; . PHP_EOL;</span><br><span class="line">foreach ($carList as $carDetail) &#123;</span><br><span class="line">$carDetail[&#39;sesame&#39;] &#x3D; 1;</span><br><span class="line">$table-&gt;set(getKey($carDetail), $carDetail);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;处理闪租业务</span><br><span class="line">function handleEasy($carList &#x3D; [], $table &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;Child #&#39; . getmypid() . &quot; start to handle Easy&quot; . PHP_EOL;</span><br><span class="line">foreach ($carList as $carDetail) &#123;</span><br><span class="line">&#x2F;&#x2F;sleep(1);</span><br><span class="line">$carDetail[&#39;easy&#39;] &#x3D; 1;</span><br><span class="line">$table-&gt;set(getKey($carDetail), $carDetail);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;处理优惠券业务</span><br><span class="line">function handleCoupon($carList &#x3D; [], $table &#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;Child #&#39; . getmypid() . &quot; start to handle Coupon&quot; . PHP_EOL;</span><br><span class="line">foreach ($carList as $carDetail) &#123;</span><br><span class="line">$carDetail[&#39;coupon&#39;] &#x3D; 1;</span><br><span class="line">$table-&gt;set(getKey($carDetail), $carDetail);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;唯一key</span><br><span class="line">function getKey($carDetail &#x3D; [])</span><br><span class="line">&#123;</span><br><span class="line">return &quot;&#123;$carDetail[&#39;clid&#39;]&#125;-&#123;$carDetail[&#39;id&#39;]&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getCarList($start &#x3D; 0, $end &#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">if ($end &lt;&#x3D; $start) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">$data &#x3D; file_get_contents(&quot;http:&#x2F;&#x2F;127.0.0.1:8089&#x2F;getCarList.php?start&#x3D;&#123;$start&#125;&amp;end&#x3D;$end&quot;);</span><br><span class="line">$data &#x3D; json_decode($data, true);</span><br><span class="line">return $data[&#39;data&#39;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;背景&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;某租车平台，在用户请求搜索车辆时，需要先去请求租车公司的接口，拿到对应的套餐报价回来，然后再进行统一的根据具体规则进行业务加装，例如加装一些优惠券，评分和芝麻标示等，然后返回结果给前端。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;上诉过程，由于考虑请求的供应商是大量的，假设一次二十个供应商，然后每个供应商有1千的报价返回，就有2万报价数据返回。然后在自身业务加装的时候，也不单单只有一两个业务，可能数十个。所以==每一次用户请求直接curl所有的供应商接口，拿到数据后遍厉加装，入库，返回。这样的方法是行不通的，不仅仅整个接口有可能被供应商的API超时拖垮，还可能打满整个机器的fpm进程，从而拖垮整站。==&lt;/li&gt;
&lt;li&gt;目前我们应用的方案是：&lt;img src=&quot;https://oscimg.oschina.net/oscnet/up-4f8049558b6f34bbca5bb391031fe571288.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;上面方案先撇开队列的相关的东西，就看数据入库后再读取这里分析如何优化：&lt;ol&gt;
&lt;li&gt;每次读取都是一次性读取一次搜索产生的所有套餐&lt;/li&gt;
&lt;li&gt;所有业务逻辑加装都是串行，在一个进程处理。&lt;blockquote&gt;
&lt;p&gt;优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;协程或者多线程并发读取数据&lt;/li&gt;
&lt;li&gt;多进程或者线程加装独立的业务逻辑
    
    </summary>
    
    
      <category term="swoole" scheme="https://asbectj.github.io/categories/swoole/"/>
    
    
      <category term="swoole" scheme="https://asbectj.github.io/tags/swoole/"/>
    
  </entry>
  
  <entry>
    <title>harbor安装和使用</title>
    <link href="https://asbectj.github.io/2020/03/06/docker/harbor/harbor%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://asbectj.github.io/2020/03/06/docker/harbor/harbor%E7%AE%80%E5%8D%95%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-06T15:14:09.000Z</published>
    <updated>2020-03-20T06:32:49.984Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote><ul><li>事先安装docker和docker composer</li><li>下载tar包并解压：<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></li><li>修改配置harbor.yaml中的hostname,如：harbor.cn（记得添加本地host指向：192.168.xx.xxx  harbor.cn）</li><li>生产自签证书，配置https</li></ul><ol><li>Step1 - 生成根证书私钥（无加密）： </li><li>Step2 -生成自签名证书（使用已有私钥ca.key自行签发根证书）生成ca.crt：<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line">    -subj &quot;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;ccx&#x2F;OU&#x3D;plat&#x2F;CN&#x3D;192.168.100.110&quot; \</span><br><span class="line">    -key ca.key \</span><br><span class="line">    -out ca.crt</span><br></pre></td></tr></table></figure></li><li>生成服务器端自己域名的key：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out harbor.cn.key 4096</span><br></pre></td></tr></table></figure></li><li>生成服务器端自己域名的CSR签名请求：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl req -sha512 -new \</span><br><span class="line">    -subj &quot;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;Beijing&#x2F;L&#x3D;Beijing&#x2F;O&#x3D;ccx&#x2F;OU&#x3D;plat&#x2F;CN&#x3D;192.168.100.242&quot; \</span><br><span class="line">    -key harbor.cn.key \</span><br><span class="line">    -out harbor.cn.csr</span><br></pre></td></tr></table></figure></li><li>生成一个 openssl 命令需要的外部配置文件 externalfile.ext。<br>这个文件可以随意命名，但是要记住，后面对的命令还要用到。、<br>文件内容中主要是subjectAltName这一项<br>如果配IP就写IP.1=192.168.xxx.xxx<br>如果配域名就写 DNS.1=xxx.xxx.cn<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; vim externalfile.ext &lt;&lt;-EOF</span><br><span class="line">authorityKeyIdentifier&#x3D;keyid,issuer</span><br><span class="line">basicConstraints&#x3D;CA:FALSE</span><br><span class="line">keyUsage &#x3D; digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line">extendedKeyUsage &#x3D; serverAuth </span><br><span class="line">subjectAltName &#x3D; @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1&#x3D;harbor.cn</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li>通过外部配置文件 externalfile.ext和 csr 生成 crt：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -sha512 -days 3650 -extfile externalfile.ext \</span><br><span class="line">    -CA ca.crt \</span><br><span class="line">    -CAkey ca.key \</span><br><span class="line">    -CAcreateserial \</span><br><span class="line">    -in harbor.cn.csr \</span><br><span class="line">    -out harbor.cn.crt</span><br></pre></td></tr></table></figure></li><li>将服务端的 crt 转换成客户端用的 cert：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -in harbor.cn.crt -out harbor.cn.cert</span><br></pre></td></tr></table></figure>至此，所有证书文件就创建好了：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@dev cert_harbor]# ll</span><br><span class="line">total 32</span><br><span class="line">-rw-r--r-- 1 root root 2017 Feb 23 13:44 ca.crt</span><br><span class="line">-rw-r--r-- 1 root root 3243 Feb 23 13:42 ca.key</span><br><span class="line">-rw-r--r-- 1 root root   17 Feb 23 13:53 ca.srl</span><br><span class="line">-rw-r--r-- 1 root root  232 Feb 23 13:52 externalfile.ext</span><br><span class="line">-rw-r--r-- 1 root root 2049 Feb 23 13:54 harbor.cn.cert</span><br><span class="line">-rw-r--r-- 1 root root 2049 Feb 23 13:53 harbor.cn.crt</span><br><span class="line">-rw-r--r-- 1 root root 1700 Feb 23 13:49 harbor.cn.csr</span><br><span class="line">-rw-r--r-- 1 root root 3247 Feb 23 13:47 harbor.cn.key</span><br></pre></td></tr></table></figure></li></ol><ul><li>为各个docker客户端分发证书</li></ul><ol><li>在Docker主机上执行:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;harbor.cn&#x2F;</span><br></pre></td></tr></table></figure></li><li>在Harbor主机，执行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp .&#x2F;harbor.cn.cert .&#x2F;harbor.cn.key vagrant@192.168.xxx.xxx:&#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;harbor.cn&#x2F;</span><br></pre></td></tr></table></figure></li><li>在Docker主机修改 /etc/docker/daemon.json，主要是增加”insecure-registries”:[“<a href="http://harbor.cn&quot;]">http://harbor.cn&quot;]</a> ：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;insecure-registries&quot;:[&quot;http:&#x2F;&#x2F;harbor.cn&quot;],</span><br><span class="line">&#125;</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl resatrt docker</span><br></pre></td></tr></table></figure></li></ol><ul><li>修改harbor.yaml配置，主要休息admin登陆密码，hostname，https的证书认证路径和db等</li><li>运行./prepare更新参数</li><li>运行./install.sh安装</li><li>安装和使用，来源简单参考：<a href="https://blog.csdn.net/jason9211/article/details/104464342/" target="_blank" rel="noopener">https://blog.csdn.net/jason9211/article/details/104464342/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;事先安装docker和docker composer&lt;/li&gt;
&lt;li&gt;下载tar包并解压：&lt;a href=&quot;https://github.com/goharbor/harbor/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/goharbor/harbor/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;修改配置harbor.yaml中的hostname,如：harbor.cn（记得添加本地host指向：192.168.xx.xxx  harbor.cn）&lt;/li&gt;
&lt;li&gt;生产自签证书，配置https&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Step1 - 生成根证书私钥（无加密）： &lt;/li&gt;
&lt;li&gt;Step2 -生成自签名证书（使用已有私钥ca.key自行签发根证书）生成ca.crt：
    
    </summary>
    
    
      <category term="技术" scheme="https://asbectj.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="运维" scheme="https://asbectj.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="devops" scheme="https://asbectj.github.io/tags/devops/"/>
    
      <category term="kubernetes" scheme="https://asbectj.github.io/tags/kubernetes/"/>
    
      <category term="docker" scheme="https://asbectj.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins服务搭建和部署</title>
    <link href="https://asbectj.github.io/2019/07/26/CI&amp;CD/jekins/"/>
    <id>https://asbectj.github.io/2019/07/26/CI&amp;CD/jekins/</id>
    <published>2019-07-26T03:14:09.000Z</published>
    <updated>2020-03-12T15:12:34.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>Jenkins服务搭建，配置和构建java demo任务等</p></blockquote><a id="more"></a><ol><li><p>Jenkins安装和设置</p><ul><li><p>安装JDK，此处不详述，安装版本为1.8</p></li><li><p>Jenkins安装</p><p><code>cd /etc/yum.repos.d/</code> </p><p><code>wget http://pkg.jenkins.io/redhat/jenkins.repo</code></p><p><code>rpm --import http://pkg.jenkins.io/redhat/jenkins.io.key</code></p><p><code>yum install -y jenkins</code></p><p>修改jenkins配置文件：</p><ul><li><p>查询yun下载安装的jenkins文件：rpm -ql jenkins</p></li><li><p>创建Jenkins主目录</p><p><code>sudo mkdir /data/jenkins -p</code></p><p><code>chown -R jenkins.jenkins /data/jenkins/</code></p></li><li><p>修改配置文件：vi /etc/sysconfig/jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_HOME="/var/lib/jenkins"</span><br><span class="line">JENKINS_USER="jenkins"</span><br><span class="line">JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true -Xms256m -Xmx512m -XX:MaxNewSize=256m -XX:Maxize=256m"</span><br><span class="line">JENKINS_PORT="8000"</span><br></pre></td></tr></table></figure></li><li><p>修改启动脚本，指定JAVA环境变量：vi /etc/rc.d/init.d/jenkins</p><p><code>candidates=&quot;/etc/alternatives/java/usr/lib/jvm/java-1.8.0/bin/java/usr/lib/jvm/jre-1.8.0/bin/java/usr/lib/jvm/java-1.7.0/bin/java/usr/lib/jvm/jre-1.7.0/bin/java/usr/lib/jvm/java-11.0/bin/java/usr/lib/jvm/jre-11.0/bin/java/usr/lib/jvm/java-11-openjdk-amd64/usr/bin/jdk8/bin/java&quot;</code></p></li><li><p>启动Jenkins，systemctl start jenkins</p></li><li><p>访问<a href="http://192.168.33.12:8000/" target="_blank" rel="noopener">http://192.168.33.12:8000/</a>进行jenkins 的设置，一般安装推荐的插件</p></li></ul></li></ul></li><li><p>jenkins配置</p><ul><li><p>系统配置：系统管理–&gt;系统设置—&gt;全局属性—&gt;环境变量</p><p><img src="/images/post/1564643808150.png" alt="1564643808150"></p></li><li><p>扩展邮件通知（略）</p></li><li><p>全局工具配置：系统管理–&gt;全局工具配置</p><p><img src="/images/post/1567503394916.png" alt="1567503394916"></p></li></ul></li><li><p>插件管理：系统管理–&gt;全局工具配置–&gt;可选插件安装</p><p><img src="/images/post/1567503511147.png" alt="1567503511147"></p></li><li><p>新建项目任务</p><ul><li><p>新建任务—&gt;输入描述、项目名称等</p></li><li><p>配置源码管理</p><p><img src="/images/post/1567503660630.png" alt="1567503660630"></p></li><li><p>添加git的私钥凭证等</p><p><img src="/images/post/1567503744372.png" alt="1567503744372"></p></li><li><p>构建项目</p><p><img src="/images/post/1567503807878.png" alt="1567503807878"></p></li><li><p>查看控制台输出</p><p><img src="/images/post/1567503860428.png" alt="1567503860428"></p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;Jenkins服务搭建，配置和构建java demo任务等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="devops" scheme="https://asbectj.github.io/categories/devops/"/>
    
    
      <category term="devops" scheme="https://asbectj.github.io/tags/devops/"/>
    
      <category term="ci&amp;cd" scheme="https://asbectj.github.io/tags/ci-cd/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch插件安装</title>
    <link href="https://asbectj.github.io/2019/06/30/es/ElasticSearch%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>https://asbectj.github.io/2019/06/30/es/ElasticSearch%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2019-06-30T02:14:09.000Z</published>
    <updated>2020-03-12T15:19:11.003Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>elasticsearch Head插件的安装等</p></blockquote><a id="more"></a><ol><li><p>Head插件</p><ul><li><p>是es集群的管理工具，可用它看到集群的健康情况，可用于数据的查询和浏览</p></li><li><p>head托管在github上（<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">https://github.com/mobz/elasticsearch-head</a>）,因为运行elasticsSearch-head会用到grunt，grunt是需要npm包管理器，所以必须安装nodejs，参考：<a href="https://www.cnblogs.com/cerofang/p/9981698.html" target="_blank" rel="noopener">https://www.cnblogs.com/cerofang/p/9981698.html</a></p><p><code>rpm -qa|grep git #查看有没安装git</code></p><p><code>yum install git #安装git</code></p></li><li><p>下载git clone head插件到本地目录下</p><p><code>cd /usr/local/</code></p><p><code>git clone</code></p><p><code>npm install -g grunt-cli</code></p><p><code>npm install cnpm -g --registry=https://registry.npm.taobao.org #安装cnpm</code></p><p><code>cd /usr/local/elasticsearch-head/</code></p><p><code>cnpm install</code></p><p><code>vi Gruntfile.js #修改这个文件，在connect--&gt;server--&gt;options下追加配置：hostname：&#39;*&#39;</code></p><p><code>修改head默认链接地址：cd _site &amp;&amp; vi app.js 找到这个配置项目：this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://192.168.33.12:9200&quot;; 修改成你es的服务器地址</code></p></li><li><p>配置es允许跨域访问，打开elasticsearch.yml文件，追加：</p><p>http.cors.enabled: true<br>http.cors.allow-origin: ‘*’</p></li><li><p>打开9100端口：(head插件默认是9100端口)</p><p>sudo firewall-cmd –zone=public –add-port=9100/tcp –permanent</p><p>sudo firewall-cmd –reload</p></li><li><p>启动es</p></li><li><p>启动head插件：</p><p><code>cd /usr/local/elasticsearch-head/node_modules/grunt/bin</code></p><p><code>./grunt server</code></p></li><li><p>浏览器访问： <a href="http://localhost:9100" target="_blank" rel="noopener">http://localhost:9100</a></p></li></ul></li><li><p>安装kibana插件</p><ul><li>kibana是一个针对ES的开源分析及可视化平台，使用kibana可以查询、查看并与存储在ES索引的数据进行交互操作，使用kibana能执行高级的数据分析，并能以图表、表格和地图的形式查看数据</li><li>下载kibana（要与ES的版本一致）：<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a></li></ul></li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;elasticsearch Head插件的安装等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="midleware" scheme="https://asbectj.github.io/categories/midleware/"/>
    
    
      <category term="es" scheme="https://asbectj.github.io/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch安装</title>
    <link href="https://asbectj.github.io/2019/06/23/es/ElasticSearch%E5%AE%89%E8%A3%85/"/>
    <id>https://asbectj.github.io/2019/06/23/es/ElasticSearch%E5%AE%89%E8%A3%85/</id>
    <published>2019-06-23T02:14:09.000Z</published>
    <updated>2020-03-12T15:18:39.802Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>elasticsearch的安装等</p></blockquote><a id="more"></a><ol><li><p>centos下安装</p><ul><li><p>官网：<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a>，目前最高版本是7.1.1，更新于2019/5/29</p></li><li><p>安装java环境（一般java8）</p></li><li><p>下载es的tar包，解压</p></li><li><p>创建新的用户和用户组，专属于es用的（为了安全考虑，并且es默认是不给root用户权限启动的）</p><p><code>sudo groupadd es</code></p><p><code>sudo useradd es -g es -p 123456</code></p><p><code>sudo chown -R es:es es所在目录</code></p><p><code>./es目录/bin/elasticsearch (启动)</code></p></li><li><p>测试：curl 127.0.0.1:9200</p></li><li><p>实现远程访问：</p><ul><li><p>修改配置：config/elasticsearch.yml 中的：network.host: 192.168.33.12（本地ip）和端口 ：http.port: 9200</p></li><li><p>再次启动会报如下错误：</p><p><code>ERROR: [3] bootstrap checks failed[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535][2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144][3]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</code></p><p>解决方法：</p><ul><li><p>处理第一、二个错误：</p><p><code>vim /etc/security/limits.conf</code> (文件末行加入以下参数)</p><p>es（刚所建的linux用户） soft nofile 65536<br>es hard nofile 65536<br>es soft nproc 4096<br>es hard nproc 4096</p><p> vi /etc/security/limits.d/20-nproc.conf ，追加配置：es         soft    nproc     4096</p><p>sudo vi /etc/sysctl.conf  追加配置vm.max_map_count=655360，sudo sysctl -p 使其生效</p></li><li><p>处理第三个错误：打开config/elasticsearch.yml 中的配置：cluster.initial_master_nodes: [“node-1”, “node-2”]</p></li><li><p>关闭防火墙：sudo systemctl stop firewalld.service</p></li><li><p>重启服务器，然后再重启es，启动成功</p></li></ul></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;elasticsearch的安装等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="midleware" scheme="https://asbectj.github.io/categories/midleware/"/>
    
    
      <category term="es" scheme="https://asbectj.github.io/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch之倒排索引</title>
    <link href="https://asbectj.github.io/2019/06/23/es/ElasticSearch%E4%B9%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    <id>https://asbectj.github.io/2019/06/23/es/ElasticSearch%E4%B9%8B%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</id>
    <published>2019-06-23T02:14:09.000Z</published>
    <updated>2020-03-12T15:19:26.702Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>倒排索引等</p></blockquote><a id="more"></a><ol><li><p>倒排索引</p><ul><li><p>es中的一种索引结构，适用于快速的全文索引。一个倒排索引由文档中所有不重复词的列表构成，对于其中每个分词，有一个包含它的文档列表。</p><ul><li><p>如有一个这样的文档集合：</p><table><thead><tr><th>文档编号</th><th>文档内容</th></tr></thead><tbody><tr><td>1</td><td>谷歌地图之父跳槽FaceBook</td></tr><tr><td>2</td><td>谷歌地图之父加盟FaceBook</td></tr><tr><td>3</td><td>谷歌地图创始人拉斯离开谷歌加盟FaceBook</td></tr><tr><td>4</td><td>谷歌之父跳槽FaceBook与Wave项目取消有关</td></tr><tr><td>5</td><td>谷歌地图之父拉斯加盟社交网站FaceBook</td></tr></tbody></table></li><li><p>简单的倒排索引。（中文和英文等语言不同，单词之间没明确的分隔符，所以要先用分词系统将文档切分成单词序列）其中DocID为文档ID</p><table><thead><tr><th>单词ID</th><th>单词</th><th>倒排列表（DocID）</th></tr></thead><tbody><tr><td>1</td><td>谷歌</td><td>1,2,3,4,5</td></tr><tr><td>2</td><td>地图</td><td>1,2,3,4,5</td></tr><tr><td>3</td><td>之父</td><td>1,2,4,5</td></tr><tr><td>4</td><td>跳槽</td><td>1,4</td></tr><tr><td>5</td><td>FaceBook</td><td>1,2,3,4,5</td></tr><tr><td>6</td><td>加盟</td><td>2,3,5</td></tr><tr><td>7</td><td>创始人</td><td>3</td></tr><tr><td>8</td><td>拉斯</td><td>3,5</td></tr><tr><td>9</td><td>离开</td><td>3</td></tr><tr><td>10</td><td>与</td><td>4</td></tr><tr><td>11</td><td>Wave</td><td>4</td></tr><tr><td>12</td><td>项目</td><td>4</td></tr><tr><td>13</td><td>取消</td><td>4</td></tr><tr><td>14</td><td>有关</td><td>4</td></tr><tr><td>15</td><td>社交</td><td>5</td></tr><tr><td>16</td><td>网站</td><td>5</td></tr></tbody></table></li><li><p>上图的第三栏除了可记录文档的id(DocID)外还可以记录单词出现的频率信息（TF）,如（1；1），（2:1），还可以记录文档的位置信息，如（1,&lt;11&gt;,1）,(2,&lt;7&gt;,1)</p></li></ul></li><li><p>多用户能力的分布式全文搜索引擎</p></li><li><p>基于resetful web接口</p></li><li><p>java开发的</p></li><li><p>海量的数据，支持pb级别</p></li><li><p>实时、高扩展、可靠、稳定</p></li><li><p>以文档格式存储</p></li></ul></li><li><p>一些基本概念</p><ul><li>index：类似数据库中的database</li><li>type：相当数据库中的表</li><li>document（文档）：一条数据对应一篇文档，相当于数据库中的一行row。一个文档可以有多个字段（field）,mapping来描述数据类型.</li><li>Query DSL：类似mysql的sql语句，只不过在es中使用的josn格式的查询语句</li></ul></li><li><p>restful web接口</p><ul><li>GET/POST/PUT/DELETE  (查询/新增或更新/更新/删除)</li></ul></li><li><p>curl基本命令</p><ul><li>curl <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> (访问网页)</li><li>curl -i <a href="http://www.baicu.com" target="_blank" rel="noopener">www.baicu.com</a> 显示响应的头信息</li><li>curl -o save.html <a href="http://www.baidu.com（抓取网页内容保存到save.html）" target="_blank" rel="noopener">www.baidu.com（抓取网页内容保存到save.html）</a></li><li>curl -v <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> （显示一个http的通信过程）</li><li>curl -X GET/POST/PUT/DELETE url （执行GET/POST/PUT/DELETE操作）</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;倒排索引等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="midleware" scheme="https://asbectj.github.io/categories/midleware/"/>
    
    
      <category term="es" scheme="https://asbectj.github.io/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch简介</title>
    <link href="https://asbectj.github.io/2019/06/23/es/ElasticSearch%E7%AE%80%E4%BB%8B/"/>
    <id>https://asbectj.github.io/2019/06/23/es/ElasticSearch%E7%AE%80%E4%BB%8B/</id>
    <published>2019-06-23T02:14:09.000Z</published>
    <updated>2020-03-12T15:19:18.611Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>集合概述、Collection集合用法等</p></blockquote><a id="more"></a><ol><li>概述<ul><li>基于Lucene的搜索服务器</li><li>多用户能力的分布式全文搜索引擎</li><li>基于resetful web接口</li><li>java开发的</li><li>海量的数据，支持pb级别</li><li>实时、高扩展、可靠、稳定</li><li>以文档格式存储</li></ul></li><li>一些基本概念<ul><li>index：类似数据库中的database</li><li>type：相当数据库中的表</li><li>document（文档）：一条数据对应一篇文档，相当于数据库中的一行row。一个文档可以有多个字段（field）,mapping来描述数据类型.</li><li>Query DSL：类似mysql的sql语句，只不过在es中使用的josn格式的查询语句</li></ul></li><li>restful web接口<ul><li>GET/POST/PUT/DELETE  (查询/新增或更新/更新/删除)</li></ul></li><li>curl基本命令<ul><li>curl <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> (访问网页)</li><li>curl -i <a href="http://www.baicu.com" target="_blank" rel="noopener">www.baicu.com</a> 显示响应的头信息</li><li>curl -o save.html <a href="http://www.baidu.com（抓取网页内容保存到save.html）" target="_blank" rel="noopener">www.baidu.com（抓取网页内容保存到save.html）</a></li><li>curl -v <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> （显示一个http的通信过程）</li><li>curl -X GET/POST/PUT/DELETE url （执行GET/POST/PUT/DELETE操作）</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;集合概述、Collection集合用法等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="midleware" scheme="https://asbectj.github.io/categories/midleware/"/>
    
    
      <category term="es" scheme="https://asbectj.github.io/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>《JSP&amp;Servlet》读书笔记-第一章Web应用简介</title>
    <link href="https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%B8%80%E7%AB%A0Web%E5%BA%94%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%B8%80%E7%AB%A0Web%E5%BA%94%E7%94%A8%E7%AE%80%E4%BB%8B/</id>
    <published>2019-05-18T06:14:09.000Z</published>
    <updated>2020-03-12T15:14:42.415Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>Http请求、web简介等</p></blockquote><a id="more"></a><ol><li><p>URL、URN、URI</p><ul><li>URL：代表资源的地址信息</li><li>URN：代表某个资源独一无二的名称</li><li>URI：URL和URN是URI的子集</li></ul></li><li><p>HTTP协议</p><ul><li>基于请求/响应模型<ul><li>每次联机只做一次请求/响应，无请求就无响应</li></ul></li><li>无状态<ul><li>不会记住客户端的状态</li></ul></li></ul></li><li><p>GET请求</p><ul><li>请求方法+请求的URL+请求参数+HTTP版本+请求标头</li><li>请求参数长度有限制（根据浏览器版本有所不同）</li></ul></li><li><p>POST请求</p><ul><li>请求方法+请求的URL+HTTP版本+请求标头+请求的参数（在Message body中，所以长度不限制）</li></ul></li><li><p>Web容器</p><ul><li><p>运行Servlet/JSP的Http服务器（如Tomcat）</p></li><li><p>请求/响应流程</p><p><img src="/images/post/1558159257312.png" alt="1558159257312"></p></li><li><p>Servlet是执行在web容器中，web容器是由服务器的JVM启动，一个请求到来，web容器就会启动一个线程，多个请求就多个线程，由于有可能同个Servlet处理多个请求，相当于多线程在共享同个对象，所以得注意线程安全问题，避免A用户登录后看到B用户的数据。</p></li><li></li></ul></li><li><p>JSP和Servlet</p><ul><li>JSP最后还是会被web容器转译为servlet的.java文件，编译为.class文件</li></ul></li><li><p>Java EE (企业解决方案，如JSP/Servlet就是)、Java SE（初学标准，桌面工具）、Java ME（微装置、手机等解决方案）</p></li><li><p>Q&amp;A</p><ul><li>一个请求到来，web容器就会启动一个线程，多个请求就多个线程，由于有可能同个Servlet处理多个请求，相当于多线程在共享同个对象，所以得注意线程安全问题，避免A用户登录后看到B用户的数据。大概是怎样的一个情况，能举个例子？</li><li>EJB是什么？</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;Http请求、web简介等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="servlet" scheme="https://asbectj.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>《JSP&amp;Servlet》读书笔记-第三章</title>
    <link href="https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%B8%89%E7%AB%A0%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
    <id>https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%B8%89%E7%AB%A0%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</id>
    <published>2019-05-18T06:14:09.000Z</published>
    <updated>2020-03-12T15:15:12.905Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>从容器到Sevelet等</p></blockquote><a id="more"></a><ol><li><p>从容器到Sevelet</p><ul><li><p>浏览器–&gt;http服务器–&gt;web容器</p><p><img src="/images/post/1558235409522.png" alt="1558235409522"></p></li><li><p>processServlet()，用于在调用doPost和doGet相同处理逻辑时</p></li></ul></li><li><p>processServlet()，用于在调用doPost和doGet相同处理逻辑时</p></li><li><p>Q&amp;A</p><ul><li>RequestDispatcher的include()和forward()的区别：forward跳转的，调用的servlet不能带有任何的响应，不然会被覆盖</li><li>设置标头，缓存区？</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;从容器到Sevelet等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="servlet" scheme="https://asbectj.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>《JSP&amp;Servlet》读书笔记-第五章</title>
    <link href="https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%BA%94%E7%AB%A0ServletApi%E8%BF%9B%E9%98%B6%20/"/>
    <id>https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%BA%94%E7%AB%A0ServletApi%E8%BF%9B%E9%98%B6%20/</id>
    <published>2019-05-18T06:14:09.000Z</published>
    <updated>2020-03-12T15:15:29.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>了解servlet生命周期、使用servletConfig和servletContext、监听器使用和过滤器开发等</p></blockquote><a id="more"></a><ol><li><p>隐藏域：<input type="hidden"/></p><ul><li><p>浏览器–&gt;http服务器–&gt;web容器</p><p><img src="/images/post/1558235409522.png" alt="1558235409522"></p></li><li><p>processServlet()，用于在调用doPost和doGet相同处理逻辑时</p></li><li></li></ul></li><li><p>cookie。例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cookies测试</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>, <span class="string">"cookie测试"</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">    String cookieName = c.getName();</span><br><span class="line">    String cookieVal = c.getValue();</span><br><span class="line">    out.print(<span class="string">"cookie info "</span> + cookieName + cookieVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>URL重写：当服务器响应上一次请求，以超链接的方法响应给客户端</p></li><li><p>HttpSession</p></li><li><p>Q&amp;A</p><ul><li>Httpsession保存在了内存中，可以改变保存的位置的吗？</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;了解servlet生命周期、使用servletConfig和servletContext、监听器使用和过滤器开发等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="servlet" scheme="https://asbectj.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>《JSP&amp;Servlet》读书笔记-第四章</title>
    <link href="https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"/>
    <id>https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E5%9B%9B%E7%AB%A0%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/</id>
    <published>2019-05-18T06:14:09.000Z</published>
    <updated>2020-03-12T15:15:20.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>介绍几个实现会话管理的基本方式：如隐藏域、cookies和url重写等</p></blockquote><a id="more"></a><ol><li><p>隐藏域：<input type="hidden"/></p><ul><li><p>浏览器–&gt;http服务器–&gt;web容器</p><p><img src="/images/post/1558235409522.png" alt="1558235409522"></p></li><li><p>processServlet()，用于在调用doPost和doGet相同处理逻辑时</p></li><li></li></ul></li><li><p>cookie。例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cookies测试</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>, <span class="string">"cookie测试"</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">    String cookieName = c.getName();</span><br><span class="line">    String cookieVal = c.getValue();</span><br><span class="line">    out.print(<span class="string">"cookie info "</span> + cookieName + cookieVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>URL重写：当服务器响应上一次请求，以超链接的方法响应给客户端</p></li><li><p>HttpSession</p></li><li><p>Q&amp;A</p><ul><li>Httpsession保存在了内存中，可以改变保存的位置的吗？</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;介绍几个实现会话管理的基本方式：如隐藏域、cookies和url重写等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="servlet" scheme="https://asbectj.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>《JSP&amp;Servlet》读书笔记-第二章</title>
    <link href="https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BC%96%E5%86%99%E5%92%8C%E8%AE%BE%E7%BD%AEServlet/"/>
    <id>https://asbectj.github.io/2019/05/18/JSP&amp;Servlet/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E7%BC%96%E5%86%99%E5%92%8C%E8%AE%BE%E7%BD%AEServlet/</id>
    <published>2019-05-18T06:14:09.000Z</published>
    <updated>2020-03-12T15:15:03.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>环境的搭建等</p></blockquote><a id="more"></a><ol><li><p>准备开发环境</p><ul><li>下载Web容器：tomcat。ps：这里的tomcat虽然提供了Http服务器的功能，但主要还是做Web容器使用，在开发中方便，我们可以使用它的Http服务器功能，但是由于功能简单不建议把它当做生产环境的Http服务器用。</li><li>URN：代表某个资源独一无二的名称</li><li>URI：URL和URN是URI的子集</li></ul></li><li><p>关于HttpServelet</p><ul><li>HttpServlet继承GenericServlet，覆盖doGet、doPost和service等方法<ul><li>每次联机只做一次请求/响应，无请求就无响应</li></ul></li><li>@WebServlet注解<ul><li>name 指定由{name}的servlet处理请求</li><li>URLPatterns，指定request路由</li><li>loadOnStratUp&gt;0 ,在程序初始化时，实例化servlet示例，实例顺序按数值大小升序。（默认=-1是第一次请求才实例化）</li></ul></li><li>web.xml部署文件，会覆盖注解的定义</li></ul></li><li><p>文件和目录</p><ul><li>WEB-INF：外界请求无法直接访问改目录</li><li>lib：必须位于WEB-INF下，放在jar包用的</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;环境的搭建等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="servlet" scheme="https://asbectj.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>利用kubeadm搭建kubernetes集群</title>
    <link href="https://asbectj.github.io/2019/05/06/kubernetes/%E5%88%A9%E7%94%A8kubeadm%E6%90%AD%E5%BB%BAkubernetes%E9%9B%86%E7%BE%A4/"/>
    <id>https://asbectj.github.io/2019/05/06/kubernetes/%E5%88%A9%E7%94%A8kubeadm%E6%90%AD%E5%BB%BAkubernetes%E9%9B%86%E7%BE%A4/</id>
    <published>2019-05-06T15:14:09.000Z</published>
    <updated>2020-03-12T15:20:42.676Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2></blockquote><p>k8s的部署方式：</p><ol><li>传统方式，从github上拉取对应的二进制安装包，解压安装各个组件和节点，过程步骤复杂，特别是各组件要通信，配置各种ca证书。<a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">GitHub链接</a></li><li>由于传统方式安装比较麻烦，所以我们用kubeadm（k8s官方提供的集群部署工具）安装，只需按照以下基本步骤安装即可：<ul><li>master,nodes机器上安装：kubelet、kubeadm和docker，其中node和master都要运行在kebulet和docker环境之上</li><li>Master：用kubeadm init 命令，拉取下载相关的组件镜像，并启动相关pods（静态pods，不受k8s自身管理），相关的pods组件有：etcd、api-server、controller-manager、scheduler</li><li>Nodes：用kubeadm join命令把nodes加入到k8s集群中</li><li>flannel组件，也是运行在pods的守护级进程，起到个nodes的通信作用。是一个额外的组件（adds on）。<a href="https://github.com/coreos/flannel" target="_blank" rel="noopener">GitHub链接</a></li><li><a href="https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.10.md" target="_blank" rel="noopener">kubeadm相关参考文档</a></li></ul></li></ol><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol><li><p>kubernetes需要容器运行时的支持，目前官方支持的容器运行时包括：Docker、Containerd、CRI-O和frakti。本次以Docker作为容器运行环境，推荐版本为Docker CE 18.09。宿主机操作系统使用CentOs</p></li><li><p>由于Kubernetes的master和node之间会进行大量通信，安全做法是开放对应的通信端口，在安全的内网环境下可以关闭防火墙服务：</p><p><code>sudo systemctl disable firewalld</code></p><p><code>sudo systemctl stop firewalld</code></p></li><li><p>关闭swap：<code>swapoff -a</code></p></li><li><p>另外，建议在主机上禁用SELinux,让容器可以读取主机的文件系统</p><p><code>sudo setenforce 0</code></p></li><li><p>解决路由异常：`</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">vm.swappiness&#x3D;0&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf&#96;</span><br><span class="line">sudo sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf</span><br><span class="line">若报不存在目录的错误，则运行：sudo modprobe br_netfilter</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、用kubeadm快速安装kubernetes集群"><a href="#二、用kubeadm快速安装kubernetes集群" class="headerlink" title="二、用kubeadm快速安装kubernetes集群"></a>二、用kubeadm快速安装kubernetes集群</h2><p>Kubernetes 从1.4版开始引入了命令行工具kubeadm，致力于简化集群安装的过程，并解决集群的高可用问题。</p><ul><li><p>下载yum-key.gpg和rpm-package-key.gpg</p><p>sudo wget <a href="https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</a></p><p>sudo wget <a href="https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</a></p><p>导入：</p><p>sudo rpm –import yum-key.gpg</p><p>sudo rpm –import rpm-package-key.gpg </p></li><li><p>安装docker环境,docker运行时环境的配置：<a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/container-runtimes/</a></p><p><code>cd /etc/yum.repos.d/</code></p><p><code>wget &lt;https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p><p><code>yum install -y docker-ce</code></p><p>最后安装18.09版本，不然后面会出现各种问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates|sort -r  </span><br><span class="line">yum install docker-ce-18.09.0 -y</span><br></pre></td></tr></table></figure></li><li><p>安装kubeadm和相关工具</p><ul><li><p>配置yum源，yum源配置文件/etc/yum.repos.d/kubernetes.repo：</p><p>[kubernetes]</p><p>name=Kubernetes Repo</p><p>baseurl=<a href="https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/" target="_blank" rel="noopener">https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</a></p><p>enabled=1</p><p>gpgcheck=0</p></li><li><p>运行命令：<code>yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</code></p></li></ul></li><li><p>启动kubelet和docker服务，并开启开机启动。但是现在启动kubelet是会失败的，可先忽略</p><p><code>systemctl enable docker &amp;&amp; systemtcl start docker</code></p><p><code>systemctl enable kubelet &amp;&amp; systemtcl start kubelet</code></p></li><li><p>使用kubeadm config print init-defaults &gt; init-config.yaml 初始化一份配置文件，并且修改文件中配置为：imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers，因为默认的镜像地址在国内是会被墙的。（注意，如果advertiseAddress的值配置有问题，到加入节点kubeadm join的时候会出现卡住的情况，这时候检查advertiseAddress配置的ip是否有问题）</p></li><li><p><code>kubeadm config images pull --config=init-config.yaml</code> 拉取下载所需镜像。</p></li></ul><h2 id="三、master节点的安装"><a href="#三、master节点的安装" class="headerlink" title="三、master节点的安装"></a>三、master节点的安装</h2><ul><li><p>至此，准备工作已经完毕。运行<code>kubeadm init --config=init-config.yaml</code> 进行初始化，如运行结果提示kubelet没启动或者启动失败，可以重启kubelet。然后运行kubeadm rest重置，再进行kubeadm init操作</p></li><li><p>安装完毕后，按照提示命令，复制配置文件到普通用户的home目录下：</p><p><code>mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/config</code></p><p>这样就在master安装了kubernetes，但是在集群内还没有任何的node和缺乏对容器网络的配置。其中值得注意的是，在kubeadm init完成后，最后几行提示信息包含了加入其他节点的指令和所要的token。如果遗忘。可用命令<code>sudo kubeadm token create --print-join-command</code>重新打印出来。</p></li></ul><h2 id="四、安装Node"><a href="#四、安装Node" class="headerlink" title="四、安装Node"></a>四、安装Node</h2><ul><li><p>新增一个节点，系统准备所需的yun源是一样的，安装的工具可以不装kubectl。安装完毕后，启动docker和kubelet服务。</p></li><li><p>为kubeadm命令生成配置文件，文件内容如下：</p><p>其中apiServerEndpoint的值是master的服务器地址，token和tlsBootstrapToken的值是master安装最后的一行信息。</p></li><li><p>kubeadm join大致的生命流程是：1、preflight checks；2、从集群中读取配置，也就是apiServerEndpoint中配置的地址中获取；也就是在master的这个配置，可以用命令<code>kubectl -n kube-system get cm kubeadm-config -oyaml</code>查看。3、下载这个配置，然后写入到/var/lib/kubelet/config.yaml；4、激活kubelet。如果在第二部中，读取配置出现问题，有可能出现卡住的情况，这时要检查maste的apiServerEndpoint和node的是否一致。</p></li><li><p>node join完毕后，可以在master节点<code>kubectl get nodes</code>查看节点列表和状态等</p></li></ul><h2 id="五、安装网络插件-一定要指定pod-network的配置，否则会出现网络插件的pod启动或者通信失败等问题"><a href="#五、安装网络插件-一定要指定pod-network的配置，否则会出现网络插件的pod启动或者通信失败等问题" class="headerlink" title="五、安装网络插件(一定要指定pod-network的配置，否则会出现网络插件的pod启动或者通信失败等问题)"></a>五、安装网络插件(一定要指定pod-network的配置，否则会出现网络插件的pod启动或者通信失败等问题)</h2><ol><li><p>执行kubectl get nodes 你会发现master和node节点都是NoReady状态，那是因为还没安装CNI网络插件</p></li><li><p>对于CNI网络插件，可有很多选择，可参考：&lt;<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network</a></p></li><li><p>这里，我们选择weave插件，执行命令<code>kubectl apply -f &quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#39;\n&#39;)&quot;</code>即可完成安装。</p></li><li><p>运行命令：</p><p><code>sudo kubeadm join 10.0.2.15:6443 --token 9le8zj.k1y8fvr09b4h4pww --discovery-token-ca-cert-hash sha256:10187a814644dab00611161c3079fdeeef579b999c6c506c33ff55dd9bb032fa --ignore-preflight-errors=Swap</code></p><p>把节点nodes加入，等nodes的机器拉取完镜像后，这个节点就加入完毕了。可以用这个命令查看更多pods的扩展信息：</p><p>kubectl get pods -n kube-system -o wide</p></li><li><p>我们在master节点上运行：kubectl get nodes ，可以看到节点已经成功加入</p><p><strong>至此，我们简单的k8s集群已经部署完毕。。。</strong></p></li></ol><h2 id="六、一些有用的命令"><a href="#六、一些有用的命令" class="headerlink" title="六、一些有用的命令"></a>六、一些有用的命令</h2><ul><li>sudo netstat -ntlp | grep LISTEN   查看监听的端口</li><li>kubectl get pods -n kube-system -o wide 查看pods的更多扩展信息</li><li>kubectl get ns 获取所有的命名空间</li><li>sudo yum list kubelet –showduplicates  //查看所有yum包的可用版本</li><li>kubectl get pods –all-namespaces 查看所有命名空间下的pods</li></ul><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/pekkle/p/10545145.html" target="_blank" rel="noopener">https://www.cnblogs.com/pekkle/p/10545145.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;k8s的部署方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传统方式，从github上拉取对应的二进制安装包，解压安装各个组件和节点，过程步骤复杂，特别是各组件要通信，配置各种ca证书。&lt;a href=&quot;https://github.com/kubernetes/kubernetes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;由于传统方式安装比较麻烦，所以我们用kubeadm（k8s官方提供的集群部署工具）安装，只需按照以下基本步骤安装即可：&lt;ul&gt;
&lt;li&gt;master,nodes机器上安装：kubelet、kubeadm和docker，其中node和master都要运行在kebulet和docker环境之上&lt;/li&gt;
&lt;li&gt;Master：用kubeadm init 命令，拉取下载相关的组件镜像，并启动相关pods（静态pods，不受k8s自身管理），相关的pods组件有：etcd、api-server、controller-manager、scheduler&lt;/li&gt;
&lt;li&gt;Nodes：用kubeadm join命令把nodes加入到k8s集群中&lt;/li&gt;
&lt;li&gt;flannel组件，也是运行在pods的守护级进程，起到个nodes的通信作用。是一个额外的组件（adds on）。&lt;a href=&quot;https://github.com/coreos/flannel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.10.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kubeadm相关参考文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://asbectj.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="运维" scheme="https://asbectj.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="devops" scheme="https://asbectj.github.io/tags/devops/"/>
    
      <category term="kubernetes" scheme="https://asbectj.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>《疯狂JAVA》读书笔记-第八章Java集合</title>
    <link href="https://asbectj.github.io/2019/05/06/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%85%AB%E7%AB%A0java%E9%9B%86%E5%90%88/"/>
    <id>https://asbectj.github.io/2019/05/06/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%85%AB%E7%AB%A0java%E9%9B%86%E5%90%88/</id>
    <published>2019-05-06T15:14:09.000Z</published>
    <updated>2019-05-11T13:27:19.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>集合概述、Collection集合用法等</p></blockquote><a id="more"></a><ol><li><p>集合概述</p><ul><li><p>集合类又称容器类，用来盛装、保存其他数据</p></li><li><p>数组元素可为基本类型和引用类型的值，但集合只能是引用类型的值</p></li><li><p>主要有两个接口类派生：collection和map</p></li><li><p>collection是list、set和queue的父接口</p></li><li><p>lambda表达式遍历</p><ul><li>`//使用lambda表达式遍历集合<br> Collection collection = new ArrayList();<br> collection.add(“php”);<br> collection.add(“java”);<br> collection.forEach(obj -&gt; System.out.println(“集合元素” + obj));<br> collection.forEach(obj -&gt; {<pre><code>System.out.println(&quot;集合元素&quot; + obj);System.out.println(&quot;集合元素&quot; + obj);</code></pre> });`</li></ul></li><li><p>Itaerator也是java集合框架的成员，和collection不同的是，Iterator隐藏了collection类底层的各种实现细节，提供遍历collection的统一接口。在使用Iterator遍历集合时，集合的元素不能改变，只有通过iterator.remove()删除上一次next的元素才可以。</p><ul><li><p>`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Iterator遍历</span></span><br><span class="line">Iterator iterator = collection.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String c = (String) iterator.next();</span><br><span class="line">    System.out.println(<span class="string">"iterator遍历集合元素"</span> + c);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"java"</span>.equals(c)) &#123;</span><br><span class="line">        iterator.remove();<span class="comment">//删除上一next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  collection.add("c++");//不可改变元素，报错</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(collection);`</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Predicate过滤符合filter条件的元素。函数式接口，应用例子：</p><ul><li><p>`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object obj : collection) &#123;</span><br><span class="line">    System.out.println(<span class="string">"predicate过滤"</span> + predicateTest(obj, ele -&gt; ((String) ele).equals(<span class="string">"java"</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">predicateTest</span><span class="params">(Object o, Predicate p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.test(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>`</p></li></ul></li><li><p>Set集合：无序，不可重复.EnumSet性能最好，其次HashSet</p><ul><li>hashSet：按hash算法存储、无序、不是线程同步的、元素可以是null，通过hashcode+equals判断相等（当集合加入一个元素时，会调用对象的hashcode（）方法，决定元素的存储位置）。</li><li>LinkedHashSet:本质还是hashset，只有用链表维护了元素的插入顺序。元素依然不能 重复</li><li>TreeSet：SortedSet接口的实现类型，红黑树结构存储，根据元素实际大小排序。<ul><li>是通过调用元素对象的compareTo()比较的，所以元素对象必须实现compare接口,不然当集合有两个元素时，会报错。</li><li>元素必须是同一类的实例对象</li><li>保证equals返回true时，compareTo也返回true,否则会当成两个对象</li><li>注意包含可变对象的情况</li></ul></li><li>EnumSet：有序（枚举值排序），不允许插入null,</li></ul></li><li><p>List集合：有序、可重复</p><ul><li>ArrayList：线程不安全，动态扩容数组空间（通过initialCapacity指定大小）</li><li>Vector:线程安全，动态扩容数组空间（通过initialCapacity指定大小）。比较古老jdk1.0就有</li><li>Arrays,ArrayList（固定长度的list）,不可删除和添加</li></ul></li><li><p>Queue集合：先进先出</p><ul><li>PriorityQuue：根据元素大小排序，违反了先进先出。不允许null</li><li>DQueue接口和ArrayDqueue实现。双端队列，所以可以当队列，也可当栈使用。</li><li>LinkedList,是一种list集合，实现了Dqueue接口。可当栈使用。因为它内部存储是链表结构，随机访问性能较差，但是插入、删除较好。而ArrayList和ArrayDQueue是以数组结构存储，随机访问较好。</li></ul></li><li><p>Map集合：key是set的集合（因此key不能重复，重复会覆盖），value类似list。</p></li><li><p>hashMap和Hashtable：和hashset一样，尽量不要使用可变对象作为key，不然访问的时候，如果对象变量了，就无法定位到map对象，也不能删除该改变key了（用了的话，就不要改变该对象）</p><ul><li>hashMap：线程不安全，所以效率较高。key是判断hashcode和equals相等，而vale则是判断equals相等即可。key和value都可以为null</li><li>Hashtable：线程安全，比较古老。建议尽量别用，key是判断hashcode和equals相等，而vale则是判断equals相等即可,key和value都不可以为null</li><li>LinkedHashMap：和LinkedHaseSet一样，用链表维护插入时的顺序，所以性能比HashMap低。</li><li>SortedMap接口和TreeMap实现。和TreeSet一样，key必须是实现了comparable接口。对key比对排序。</li></ul></li><li><p>操作集合的工具类Collections</p><ul><li>排序</li><li>查找、替换</li><li>同步控制</li><li>设置不可变集合</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;集合概述、Collection集合用法等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>《疯狂JAVA》读书笔记-第十三章Mysql数据库和JDBC编程</title>
    <link href="https://asbectj.github.io/2019/05/06/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CJDBC%E7%BC%96%E7%A8%8B/"/>
    <id>https://asbectj.github.io/2019/05/06/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CJDBC%E7%BC%96%E7%A8%8B/</id>
    <published>2019-05-06T15:14:09.000Z</published>
    <updated>2019-05-11T13:32:31.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>集合概述、Collection集合用法等</p></blockquote><a id="more"></a><ol><li><p>集合概述</p><ul><li><p>集合类又称容器类，用来盛装、保存其他数据</p></li><li><p>数组元素可为基本类型和引用类型的值，但集合只能是引用类型的值</p></li><li><p>主要有两个接口类派生：collection和map</p></li><li><p>collection是list、set和queue的父接口</p></li><li><p>lambda表达式遍历</p><ul><li>`//使用lambda表达式遍历集合<br> Collection collection = new ArrayList();<br> collection.add(“php”);<br> collection.add(“java”);<br> collection.forEach(obj -&gt; System.out.println(“集合元素” + obj));<br> collection.forEach(obj -&gt; {<pre><code>System.out.println(&quot;集合元素&quot; + obj);System.out.println(&quot;集合元素&quot; + obj);</code></pre> });`</li></ul></li><li><p>Itaerator也是java集合框架的成员，和collection不同的是，Iterator隐藏了collection类底层的各种实现细节，提供遍历collection的统一接口。在使用Iterator遍历集合时，集合的元素不能改变，只有通过iterator.remove()删除上一次next的元素才可以。</p><ul><li><p>`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Iterator遍历</span></span><br><span class="line">Iterator iterator = collection.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String c = (String) iterator.next();</span><br><span class="line">    System.out.println(<span class="string">"iterator遍历集合元素"</span> + c);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"java"</span>.equals(c)) &#123;</span><br><span class="line">        iterator.remove();<span class="comment">//删除上一next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  collection.add("c++");//不可改变元素，报错</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(collection);`</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Predicate过滤符合filter条件的元素。函数式接口，应用例子：</p><ul><li><p>`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Object obj : collection) &#123;</span><br><span class="line">    System.out.println(<span class="string">"predicate过滤"</span> + predicateTest(obj, ele -&gt; ((String) ele).equals(<span class="string">"java"</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">predicateTest</span><span class="params">(Object o, Predicate p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p.test(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>`</p></li></ul></li><li><p>Set集合：无序，不可重复.EnumSet性能最好，其次HashSet</p><ul><li>hashSet：按hash算法存储、无序、不是线程同步的、元素可以是null，通过hashcode+equals判断相等（当集合加入一个元素时，会调用对象的hashcode（）方法，决定元素的存储位置）。</li><li>LinkedHashSet:本质还是hashset，只有用链表维护了元素的插入顺序。元素依然不能 重复</li><li>TreeSet：SortedSet接口的实现类型，红黑树结构存储，根据元素实际大小排序。<ul><li>是通过调用元素对象的compareTo()比较的，所以元素对象必须实现compare接口,不然当集合有两个元素时，会报错。</li><li>元素必须是同一类的实例对象</li><li>保证equals返回true时，compareTo也返回true,否则会当成两个对象</li><li>注意包含可变对象的情况</li></ul></li><li>EnumSet：有序（枚举值排序），不允许插入null,</li></ul></li><li><p>List集合：有序、可重复</p><ul><li>ArrayList：线程不安全，动态扩容数组空间（通过initialCapacity指定大小）</li><li>Vector:线程安全，动态扩容数组空间（通过initialCapacity指定大小）。比较古老jdk1.0就有</li><li>Arrays,ArrayList（固定长度的list）,不可删除和添加</li></ul></li><li><p>Queue集合：先进先出</p><ul><li>PriorityQuue：根据元素大小排序，违反了先进先出。不允许null</li><li>DQueue接口和ArrayDqueue实现。双端队列，所以可以当队列，也可当栈使用。</li><li>LinkedList,是一种list集合，实现了Dqueue接口。可当栈使用。因为它内部存储是链表结构，随机访问性能较差，但是插入、删除较好。而ArrayList和ArrayDQueue是以数组结构存储，随机访问较好。</li></ul></li><li><p>Map集合：key是set的集合（因此key不能重复，重复会覆盖），value类似list。</p></li><li><p>hashMap和Hashtable：和hashset一样，尽量不要使用可变对象作为key，不然访问的时候，如果对象变量了，就无法定位到map对象，也不能删除该改变key了（用了的话，就不要改变该对象）</p><ul><li>hashMap：线程不安全，所以效率较高。key是判断hashcode和equals相等，而vale则是判断equals相等即可。key和value都可以为null</li><li>Hashtable：线程安全，比较古老。建议尽量别用，key是判断hashcode和equals相等，而vale则是判断equals相等即可,key和value都不可以为null</li><li>LinkedHashMap：和LinkedHaseSet一样，用链表维护插入时的顺序，所以性能比HashMap低。</li><li>SortedMap接口和TreeMap实现。和TreeSet一样，key必须是实现了comparable接口。对key比对排序。</li></ul></li><li><p>操作集合的工具类Collections</p><ul><li>排序</li><li>查找、替换</li><li>同步控制</li><li>设置不可变集合</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;集合概述、Collection集合用法等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>《疯狂JAVA》读书笔记-第七章Java基础类库</title>
    <link href="https://asbectj.github.io/2019/05/05/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%83%E7%AB%A0java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93/"/>
    <id>https://asbectj.github.io/2019/05/05/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%B8%83%E7%AB%A0java%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%BA%93/</id>
    <published>2019-05-05T15:14:09.000Z</published>
    <updated>2019-05-06T15:20:28.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>Java 8提供了4000多个基础类，合格的Java程序员要掌握Java SE中70%以上的基础类</p></blockquote><a id="more"></a><ol><li>用户互动<ul><li>main函数中的args是运行前给用户指定参数的。如：java Test “java test”</li><li>Scanner获取用户输入。（基于正则的文本扫描器）</li></ul></li><li>系统类（代表当前java程序的运行平台）</li><li>Runtime类（java程序运行时的运行环境）</li><li>常用类：<ul><li>StringBuffer和StringBuidler,其中StringBuffer是线程安全的</li><li>Date 和 Calendar 。Date 存在缺陷</li></ul></li><li>正则表达式（没怎么看）</li><li>国际化和格式</li><li>java 8新增的时间、日期格式器（没看）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;Java 8提供了4000多个基础类，合格的Java程序员要掌握Java SE中70%以上的基础类&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>《疯狂JAVA》读书笔记-第六章面向对象（下）</title>
    <link href="https://asbectj.github.io/2019/05/04/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://asbectj.github.io/2019/05/04/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E5%85%AD%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2019-05-04T15:14:09.000Z</published>
    <updated>2019-05-06T15:39:25.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>包装类及其用法、内部类、枚举类、Lambda表达式、接口、抽象类和垃圾回收等</p></blockquote><a id="more"></a><ol><li><p>-128-127，在用包装类Integer a=2 ;Integer b=2; a==b;是相关等的，因为jdk1.5后，有一个自动装箱的特性，在new Inteager(2)的时候，其实都是引用了预先示例好的一个cacahe数组，范围是-128到127。当定义超出这个范围的数时，两个对象就是不等（不同的）对象了。</p></li><li><p>常量池：在编译时就确定下来并保存在.class文件中的常量（包括了类、方法、接口的常量和字符串常量）。</p><ul><li>构造器：创建对象的根本途径，每个类都有一个默认无参的构造器（隐式返回该类实例）</li><li>成员变量：可用public、protected、private、static和final修饰</li><li>方法：可用public、protected、private、static、final和abstract修饰，但final和abstract只能出现其一</li></ul></li><li><p>单例类：一个类只允许创建一个实例。因为不能给自由创建对象，所以构造器方法必须private,因此又需提供一个返回该类对象的方法（因为在此之前是没对象的，所以方法必须为static，属于类方法），而且创建过的对象必须静态缓存起来，所以对象的成员变量是static修饰的。</p></li><li><p>final关键字（程序员显式初始化后不可更改，系统不会隐式初始化）</p><ul><li><p>类变量：静态代码块和初始化变量时指定</p></li><li><p>实例变量：普通代码块、指定变量时或者构造器中指定</p></li><li><p>修饰基本类型和引用变量的区别：基本类型不可重新赋值，引用变量由于是执行一个地址，所指向的对象可重新赋值，地址不可。</p></li><li><p>不可变类：创建该类后，该类的实例变量不可变。遵循以下规则：</p><ul><li>使用private和final来修饰成员变量</li><li>提供构造器，传入参数方式初始化值</li><li>只提供get方法，不提供set方法</li></ul></li><li><p>抽象类</p><ul><li>用abstract修饰</li><li>不能实例化（不能用new创建），即使不含抽象方法</li><li>含抽象方法</li><li>final（static）和abstract永远不能同时被使用</li></ul></li><li><p>接口</p><ul><li>所有的方法都是抽象方法，java8改进接口，允许定义默认方法，提供方法的实现。</li></ul></li><li><p>接口和抽象类区别：</p><ul><li>接口和抽象类都不能被实例化</li><li>都可包含抽象方法，且实现接口和继承抽象类都必须实现这些抽象方法</li><li>接口不可定义普通成员变量，只可定义静态常量。</li><li>接口只能包含默认方法和抽象方法，而抽象类可包含普通方法</li><li>接口不含有构造器，但是抽象类型可以含有构造器，但不是创建对象的，而且为了完成给子类调用完成抽象类的实例初始化工作。</li><li>可以实现多个接口，抽象类只能单继承。</li></ul></li><li><p>内部类</p><ul><li>非静态内部类不能用户静态成员</li><li>内部类可以访问外部的私有成员，但是外部类不能访问内部类的实现细节</li><li>内部类比外部类多了三个修饰：private,protected,static</li><li>内部类是类成员，匿名内部类和局部内部类则不是</li><li>静态内部类，属于外部类而不属于外部类的对象。</li><li>静态内部类只能访问外部类的静态成员。即使是静态内部类的实例访问也不能访问外部类的非静态成员。</li></ul></li><li><p>局部内部类：在方法里面定义的类。</p></li><li><p>匿名内部类：只需执行一次调用。必须实现接口或者继承一个父类，无类名，所以无构造器。不能是抽象类，因为匿名内部类必须初始化实例对象。</p></li><li><p>lambda表达式：</p><ul><li>目标类型必须是函数式接口（只包含一个抽象方法的接口）</li></ul></li><li><p>枚举类：实例有限且固定的类</p><ul><li>默认继承java.lang.Enum类，不能显式继承其他类</li><li>使用enum定义的非抽象类，是用final修饰的，因此不能派生子类</li><li>构造器的访问级别必须是private</li><li>枚举类的所有实例必须在第一行显式列出</li><li>不能随便用new创建对象，一般用valueOf</li></ul></li><li><p>对象与垃圾回收</p><ul><li><p>只回收堆内存中的对象，不回收物理资源</p></li><li><p>无法精准控制回收时机</p></li><li><p>回收前总会调用finalize()方法，该方法可能使对象重新引用而取消了回收</p></li><li><p>对象在内存中的状态</p><p><img src="/images/post/1555545311668.png" alt="1555545311668"></p></li></ul></li><li><p>强制回收：System.gc()或者Runtime.getRumtime.gc()，建议系统去回收（并不是马上）</p></li><li><p>对象的强、软、弱、虚引用</p><ul><li>强引用：正常的创建对象，并赋给引用变量的情况</li><li>软引用：通过SoftRefernce实现，内存足够时不会被回收，反之才回收</li><li>弱引用：通过WeakReference实现，当进行垃圾回收时，总会被回收</li><li>虚引用：通过PhantomReference实现，跟没引用差不多，不能单独使用，要结合引用队列</li></ul></li><li><p>修饰符使用范围</p><ul><li>strictfp 让浮点更精确，可以修饰类，接口和方法</li></ul></li><li><p>jar包相关</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;包装类及其用法、内部类、枚举类、Lambda表达式、接口、抽象类和垃圾回收等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>《疯狂JAVA》读书笔记-第五章面向对象（上）</title>
    <link href="https://asbectj.github.io/2019/05/03/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%BA%94%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://asbectj.github.io/2019/05/03/%E7%96%AF%E7%8B%82JAVA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%AC%AC%E4%BA%94%E7%AB%A0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2019-05-03T15:14:09.000Z</published>
    <updated>2019-05-06T15:44:10.197Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>本章要点：</strong>定义类、成员变量、方法、方法重载、继承、多态、static关键字、静态代码块等</p></blockquote><a id="more"></a><ol><li><p>类和对象，类是对象的抽象，对象是类的具体实现</p></li><li><p>类（可用public、final和abstract修饰）包含常见成员：构造器、成员变量和方法</p><ul><li>构造器：创建对象的根本途径，每个类都有一个默认无参的构造器（隐式返回该类实例）</li><li>成员变量：可用public、protected、private、static和final修饰</li><li>方法：可用public、protected、private、static、final和abstract修饰，但final和abstract只能出现其一</li></ul></li><li><p>static关键字：被static修饰的方法和变量是属于类本身，称类方法和类变量，而非static的是实例方法和实例变量，<strong>静态成员不能直接访问非静态成员。</strong></p></li><li><p>对象、引用和指针</p><p><code>Persion p = new Persion();</code></p><p><code>p.name=&quot;李刚&quot;；</code></p><p><code>p.age=18；</code></p><p><code>Persion p2 = p；</code></p></li></ol><p>   <img src="/images/post/1554736290688.png" alt="1554736290688"></p><ol start="5"><li><p>方法详解</p><ul><li>必须在类内定义</li><li>参数的传递为值传递，注意情况：当参数为引用类型时，方法内复制的对象变量和方法外的变量指向同一个堆内存变量</li><li>形参参数可变：参数类型后跟三个点（…）,test(String … books)。<strong>且该参数只能是方法最后一个</strong></li><li><strong>方法重载：两同一不同（同一类同名方法，不同参数列表）。与方法的返回类型和修饰无关,注意参数是可变长度参数的重载，一般不建议重载此情况，有碍代码可读性</strong></li></ul></li><li><p>成员变量（实例变量、类变量）和局部变量（形参、方法内的局部变量和代码块定义的局部变量）</p><ul><li>类变量可以被所有该类的实例变量访问，且都是指向同一内存区</li><li>局部变量：除形参外，必须显式初始化（赋初始值），否则报错</li></ul></li><li><p>隐藏和封装</p><ul><li>访问控制符：private（类内） &gt; protected（子类） &gt; default(同一包下) &gt; public</li><li>java的package，相当于命名空间，区分相同类文件。用import导入不同包的类</li></ul></li><li><p>深入构造器</p><ul><li>调用构造器之前，类的实例对象已经被创建（分配了内存空间）</li><li>构造器重载</li></ul></li><li><p>类的继承</p><ul><li>方法重写（覆盖）：两同两小一大：方法名和参数列表相同，子类的异常要比父类的异常更小或相等，子类返回的类型要比父类更小或相等，子类的方法访问级别要比父类大或相等。</li><li>父类构造器：若不显式调用，默认调用是父类的无参构造器</li></ul></li><li><p><strong>多态：java引用变量分两类型：编译时类型和运行时类型。编译型由于声明变量时的类型决定，而运行时则由于实际赋予该变量的对象决定。当编译时和运行时类型不一致时，就称为多态。</strong></p><ul><li><strong>只能调用声明该变量时所用的类包含的方法，而不能调用它运行类型的方法。</strong></li></ul></li><li><p>代码块</p><ul><li><strong>顶级类静态代码块–&gt;父类静态代码块–&gt;子类静态代码块（第一次创建对象时）–&gt;普通代码块–&gt;构造器</strong></li><li><strong>普通初始定义变量和普通代码块是一样的，按先后顺序（静态代码块和静态变量也一样）</strong></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本章要点：&lt;/strong&gt;定义类、成员变量、方法、方法重载、继承、多态、static关键字、静态代码块等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://asbectj.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
